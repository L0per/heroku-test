{"version":3,"sources":["components/Filter.js","components/Names.js","components/Personform.js","services/persons.js","components/Notification.js","App.js","serviceWorker.js","index.js"],"names":["Filter","props","value","newFilter","onChange","filterChange","Name","person","name","toLowerCase","includes","filter","number","onClick","deletePerson","id","Names","persons","map","key","Personform","onSubmit","addPerson","newName","handleNameChange","newNumber","handleNumberChange","type","baseUrl","axios","get","newObject","post","delete","put","Notification","style","color","background","fontSize","borderStyle","borderRadius","padding","marginBottom","message","App","useState","setPersons","setNewName","setNewNumber","setNewFilter","notificationMessage","setNotificationMessage","messageType","setMessageType","useEffect","personService","then","response","data","event","target","preventDefault","length","personObject","some","window","confirm","findIndex","setTimeout","catch","error","concat","attributes","toString","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.86f6456c.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Filter = (props) => {\r\n    return( \r\n      <div>\r\n        filter names:\r\n        <input \r\n            value={props.newFilter} \r\n            onChange={props.filterChange}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n\r\nexport default Filter","import React from 'react'\r\n\r\nconst Names = (props) => {\r\n    return(\r\n      props.persons.map(person => \r\n      <Name key={person.name} person={person} filter={props.newFilter} deletePerson={props.deletePerson} />)\r\n    )\r\n  }\r\n  \r\nconst Name = (props) => {\r\n  const name = props.person.name.toLowerCase()\r\n  if ( name.includes(props.filter.toLowerCase()) ) {\r\n      return ( \r\n        <div>\r\n          {props.person.name} {props.person.number} <button onClick={props.deletePerson} id={props.person.id} name={props.person.name}>Delete</button>\r\n        </div> \r\n      )\r\n  } else {\r\n      return( <div></div> )\r\n  }\r\n}\r\n\r\nexport default Names","import React from 'react'\n\nconst Personform = (props) => {\n    return(\n      <form onSubmit={props.addPerson}>\n        <div>\n          name: \n          <input \n            value={props.newName} \n            onChange={props.handleNameChange}\n          />\n        </div>\n        <div>\n          number: \n          <input \n            value={props.newNumber} \n            onChange={props.handleNumberChange}\n          />\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n    )\n  }\n\nexport default Personform","import axios from 'axios'\r\n\r\nconst baseUrl = '/api/persons/'\r\n\r\nconst getAll = () => {\r\n    return axios.get(baseUrl)\r\n}\r\n\r\nconst create = newObject => {\r\n    return axios.post(baseUrl, newObject)\r\n}\r\n\r\nconst deletePerson = id => {\r\n    return axios.delete(baseUrl+id)\r\n}\r\n\r\nconst updatePerson = (id, newObject) => {\r\n    return axios.put(baseUrl+id, newObject)\r\n}\r\n\r\nexport default { getAll, create, deletePerson, updatePerson }","import React from 'react'\r\n\r\nconst Notification = props => {\r\n    const goodNotificationStyle = {\r\n        color: 'green',\r\n        background: 'lightgrey',\r\n        fontSize: 20,\r\n        borderStyle: 'solid',\r\n        borderRadius: 5,\r\n        padding: 10,\r\n        marginBottom: 10\r\n    }\r\n  \r\n    const badNotificationStyle = {\r\n      color: 'red',\r\n      background: 'lightgrey',\r\n      fontSize: 20,\r\n      borderStyle: 'solid',\r\n      borderRadius: 5,\r\n      padding: 10,\r\n      marginBottom: 10\r\n    }\r\n  \r\n    if (props.type === 'good') {\r\n      return(\r\n        <div style={goodNotificationStyle}>\r\n          {props.message}\r\n        </div>\r\n      )\r\n    } else if (props.type === 'bad') {\r\n      return(\r\n        <div style={badNotificationStyle}>\r\n          {props.message}\r\n        </div>\r\n      )\r\n    } else {\r\n      return <div></div>\r\n    }\r\n}\r\n\r\nexport default Notification","import React, { useState, useEffect } from 'react'\nimport Filter from './components/Filter'\nimport Names from './components/Names'\nimport Personform from './components/Personform'\nimport personService from './services/persons'\nimport Notification from './components/Notification'\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ newFilter, setNewFilter ] = useState('')\n  const [ notificationMessage, setNotificationMessage ] = useState('')\n  const [ messageType, setMessageType ] = useState('')\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(response => {\n        setPersons(response.data)\n      })\n  }, [])\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => {\n    setNewFilter(event.target.value)\n  }\n\n  const addPerson = (event) => {\n    // prevent page reload\n    event.preventDefault();\n\n    // prevent submitting blank form\n    if (newName.length < 1 || newNumber < 1) {\n      return;\n    }\n    \n    const personObject = {\n      name: newName,\n      number: newNumber\n    }\n\n    //check whether person is already in phonebook\n    if (persons.some(person => person.name === newName)) {\n      if (window.confirm(`${newName} already in phonebook, update current entry?`)) {\n        const id = persons.findIndex( person => person.name === newName) + 1;\n        personService\n          .updatePerson(id, personObject)\n          .then ( () => {\n            personService\n              .getAll()\n              .then(response => {\n                setPersons(response.data)\n                setMessageType('good')\n                setNotificationMessage(`${newName} updated successfully!`)\n                setTimeout(() => {\n                  setNotificationMessage(null)\n                  setMessageType('none')\n                  }, 3000)\n                setNewName('')\n                setNewNumber('')\n              })\n          })\n          .catch(error => {\n            personService\n              .getAll()\n              .then(response => {\n                setPersons(response.data)\n                setMessageType('bad')\n                setNotificationMessage(`${newName} was already deleted from the database`)\n                setTimeout(() => {\n                  setNotificationMessage(null)\n                  setMessageType('none')\n                  }, 3000)\n                setNewName('')\n                setNewNumber('')\n              })\n          })\n      }\n    } else {\n      personService\n        .create(personObject)\n        .then(response => {\n          setPersons(persons.concat(response.data))\n          setMessageType('good')\n          setNotificationMessage(`${newName} added successfully!`)\n          setTimeout(() => {\n            setNotificationMessage(null)\n            setMessageType('none')\n            }, 3000)\n          setNewName('')\n          setNewNumber('')\n        })\n    }\n  }\n  \n  const deletePerson = (event) => {\n    const name = event.target.attributes.name.value;\n    const id = event.target.attributes.id.value.toString();\n    if (window.confirm(`Delete ${name}?`)) {\n      personService\n      .deletePerson(id)\n      .then( () => {\n        personService\n          .getAll()\n          .then(response => \n            setPersons(response.data))\n            setMessageType('bad')\n            setNotificationMessage(`${name} removed successfully!`)\n            setTimeout(() => {\n              setNotificationMessage(null)\n              setMessageType('none')\n              }, 3000)\n      })\n    }\n  }\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n        <Filter filter={newFilter} filterChange={handleFilterChange} />\n      <h2>Add new name and number</h2>\n        <Personform \n          addPerson={addPerson} \n          newName={newName} \n          handleNameChange={handleNameChange}\n          newNumber={newNumber}\n          handleNumberChange={handleNumberChange}\n        />\n      <Notification message={notificationMessage} type={messageType} />\n      <h2>Numbers</h2>\n        <Names persons={persons} newFilter={newFilter} deletePerson={deletePerson} />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}